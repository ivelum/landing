AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  BucketName:
    Type: String
  WebsiteCertificateARN:
    Type: String
  CorsAllowedOrigins:
    Type: String
    Default: "https://ivelum.com"
    Description: Comma-separated list of allowed origins for CORS

Resources:
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: BucketName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: WebsiteBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Principal: "*"
            Resource:
              Fn::Sub: "arn:aws:s3:::${WebsiteBucket}/*"

  WebsiteDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: WebsiteBucket
    Properties:
      DistributionConfig:
        Aliases:
          - ivelum.com
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: /404.html
        Origins:
          - DomainName:
              Ref: WebsiteBucket
            Id:
              Ref: WebsiteBucket
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: 'http-only'
        Enabled: 'true'
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId:
            Ref: WebsiteBucket
          ViewerProtocolPolicy: 'redirect-to-https'
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
            Headers:
              - Access-Control-Request-Headers
              - Access-Control-Request-Method
              - Origin
        ViewerCertificate:
          AcmCertificateArn:
            Ref: WebsiteCertificateARN
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only

  DeployUser:
    Type: AWS::IAM::User
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:ListBucket
                Effect: Allow
                Resource:
                  Fn::Sub: "arn:aws:s3:::${WebsiteBucket}"
              - Action:
                  - s3:*Object*
                Effect: Allow
                Resource:
                  Fn::Sub: "arn:aws:s3:::${WebsiteBucket}/*"
              - Action:
                  - cloudfront:CreateInvalidation
                Effect: Allow
                Resource: "*"
              - Action:
                  - lambda:GetFunction
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                Effect: Allow
                Resource: !GetAtt LandingLambda.Arn
          PolicyName: manage-static-website

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: "ses-send-email"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ses:SendEmail"
                  - "ses:SendRawEmail"
                Resource: "*"

  LandingLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "handler.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        # use CF feature - it compares yaml config with its previous version
        # without looking at the actual state of the lambda function
        # this way we can update code, deps and env vars during deploy
        ZipFile: import this
      Runtime: "python3.10"
      Timeout: 10

  LandingLambdaUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      Cors:
        AllowOrigins: !Split [',', !Ref CorsAllowedOrigins]
        ExposeHeaders:
          - '*'
        AllowHeaders:
          - '*'
        AllowMethods:
          - '*'
        MaxAge: 0
        AllowCredentials: false
      TargetFunctionArn: !GetAtt LandingLambda.Arn

  # Create permission for API Gateway to invoke Lambda
  LandingPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:invokeFunctionUrl
      FunctionName: !Ref LandingLambda
      FunctionUrlAuthType: 'NONE'
      Principal: '*'

Outputs:
  LandingInvokeURL:
    Value: !GetAtt LandingLambdaUrl.FunctionUrl
    Description: URL for invoking the API function
